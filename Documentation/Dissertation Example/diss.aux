\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\abx@aux@sortscheme{nty}
\providecommand\@newglossary[4]{}
\@newglossary{main}{glg}{gls}{glo}
\providecommand\@glsorder[1]{}
\providecommand\@istfilename[1]{}
\@istfilename{diss.ist}
\@glsorder{word}
\@writefile{toc}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lof}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\@writefile{lot}{\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax }
\abx@aux@cite{mcfarling1986reducing}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1.1}Why is a conditional move useful?}{1}{section.1.1}}
\abx@aux@cite{chang1997improving}
\abx@aux@cite{HenPat2012}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1.2}My approach}{2}{section.1.2}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {1.1}{\ignorespaces Amdahl's law; P = fraction for which conditional move instructions are used\relax }}{3}{figure.caption.11}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {1.3}Evaluating advantages and disadvantages}{4}{section.1.3}}
\abx@aux@cite{sites1993alpha}
\abx@aux@cite{MIPSIV}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {2}Preparation}{5}{chapter.2}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.1}Conditional move in MIPS}{5}{section.2.1}}
\abx@aux@cite{RISCV_MAN}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.2}The RISC-V instruction set}{6}{section.2.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Instruction format}{6}{subsection.2.2.1}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces RISC-V instruction lengths\relax }}{6}{figure.caption.12}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces RISC-V base instruction formats\relax }}{7}{figure.caption.13}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}Why does it not contain a conditional move?}{7}{subsection.2.2.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.3}The FLUTE RISC-V implementation}{7}{section.2.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Processor pipeline}{8}{subsection.2.3.1}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces The FLUTE pipeline\relax }}{8}{figure.caption.14}}
\abx@aux@cite{AppleXCode}
\abx@aux@cite{riscvWebsite}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Branch prediction}{9}{subsection.2.3.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.4}The RISC-V LLVM}{9}{section.2.4}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Extract of an LLVM \textit  {SelectionDAG} including a select node\relax }}{10}{figure.caption.15}}
\abx@aux@cite{weicker1984dhrystone}
\abx@aux@cite{Gustafsson:WCET2010:Benchmarks}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces A simplified view of the retargetable LLVM code generator with x86 target descriptions\relax }}{11}{figure.caption.16}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.5}Benchmarks}{11}{section.2.5}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.1}Dhrystone}{11}{subsection.2.5.1}}
\abx@aux@cite{pallister2013beebs}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.2}WCET}{12}{subsection.2.5.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.3}BEEBS}{12}{subsection.2.5.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.4}SPECint2006}{12}{subsection.2.5.4}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {2.5.5}Other tests}{13}{subsection.2.5.5}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {2.6}Software engineering approach}{13}{section.2.6}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {3}Implementation}{15}{chapter.3}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.1}Extending the instruction set}{15}{section.3.1}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces RISC-V R-type instruction format\relax }}{16}{figure.caption.17}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces RISC-V allocation of \textit  {opcodes} for 32-bit instructions; the last two bits of the \textit  {opcode}, inst[1:0] are always $11$ to specify the instruction length\relax }}{16}{figure.caption.18}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.2}Adding a conditional move to the processor}{16}{section.3.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Extending the processor}{16}{subsection.3.2.1}}
\newlabel{opcode_rule}{{3.1}{17}{bluespec rule for executing the conditional move; extract from CPU\_Stage4.bsv}{lstlisting.3.1}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.1}bluespec rule for executing the conditional move; extract from CPU\_Stage4.bsv}{17}{lstlisting.3.1}}
\abx@aux@cite{perleberg1993branch}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Extending the verifier}{18}{subsection.3.2.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.3}Adding different branch predictors}{18}{section.3.3}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces A branch predictor with branch target buffer and saturating counters\relax }}{19}{figure.caption.19}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Schematic design of the local history predictor with branch targets, both the history pattern table and the shared counter table have 1024 entries\relax }}{19}{figure.caption.20}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces A single history entry and how it is used to access the saturating counters\relax }}{20}{figure.caption.21}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.4}Extending LLVM and GNU Assembler}{20}{section.3.4}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.1}LLVM}{20}{subsection.3.4.1}}
\newlabel{cmovSelDAGNode}{{3.2}{20}{Definition of the conditional move SelectionDAG node; extracted from RISCVInstrInfo.td}{lstlisting.3.2}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.2}Definition of the conditional move SelectionDAG node; extracted from RISCVInstrInfo.td}{20}{lstlisting.3.2}}
\newlabel{cmovPattern}{{3.3}{21}{example {\textit {SelectionDAG} pattern; extracted from RISCVInstrInfo.td}}{lstlisting.3.3}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.3}example {\textit  {SelectionDAG} pattern; extracted from RISCVInstrInfo.td}}{21}{lstlisting.3.3}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces An extract of a \textit  {SelectionDAG} with a select node before the selection pass\relax }}{21}{figure.caption.22}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces The same extract of a \textit  {SelectionDAG} as in figure \ref  {pattern_example_isel}, but after the selection pass\relax }}{21}{figure.caption.23}}
\newlabel{cmov_zero_Pattern}{{3.4}{22}{\textit {SelectionDAG} pattern consisting of a select where the second source operand is zero and a set-less-than node; it replacement is a \texttt {cmovez} node and a set-less-than node with swapped operands; extracted from RISCVInstrInfo.td}{lstlisting.3.4}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.4}\textit  {SelectionDAG} pattern consisting of a select where the second source operand is zero and a set-less-than node; it replacement is a \texttt  {cmovez} node and a set-less-than node with swapped operands; extracted from RISCVInstrInfo.td}{22}{lstlisting.3.4}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.2}Contributing to the RISC-V LLVM}{23}{subsection.3.4.2}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces Simplified view of the instruction lowering process for a select instructions, vr1 - vr4 are arbitrary identifiers for virtual registers\relax }}{23}{figure.caption.24}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.3}The GNU Assembler}{24}{subsection.3.4.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.5}Adding debug instructions}{24}{section.3.5}}
\abx@aux@cite{persim}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {3.6}Testing the processor}{25}{section.3.6}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.6.1}Execution environment}{25}{subsection.3.6.1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.6.2}Compiling and running tests}{25}{subsection.3.6.2}}
\newlabel{faulty_c_code}{{3.5}{26}{Example C code that will compile incorrectly if compiled with the RISC-V LLVM and optimisations enabled}{lstlisting.3.5}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.5}Example C code that will compile incorrectly if compiled with the RISC-V LLVM and optimisations enabled}{26}{lstlisting.3.5}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {3.6.3}Collecting data}{27}{subsection.3.6.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {4}Evaluation}{29}{chapter.4}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.1}Comparison to MIPS}{29}{section.4.1}}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\contentsline {table}{\numberline {4.1}{\ignorespaces number of occurrences of conditional move instructions in the assembly code when compiled with my modified RISC-V and the MIPS clang compiler; *: no conditional move at run-time; **: could not link or run successfully \relax }}{30}{table.caption.25}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.2}Dynamic frequency of conditional moves}{31}{section.4.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.3}Performance changes}{31}{section.4.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.1}Changes is branch prediction accuracy}{31}{subsection.4.3.1}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces The percentage of branch prediction misses with cmov over branch prediction misses without cmov\relax }}{31}{figure.caption.26}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.2}Changes in execution speed}{32}{subsection.4.3.2}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces relative change of instructions per cycle from non-cmov program to cmov program\relax }}{32}{figure.caption.27}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.3}{\ignorespaces $\mathrm  {Speedup} =\frac  {\mathrm  {No. \nobreakspace  {} of \nobreakspace  {}cycles}_{old}}{\mathrm  {No. \nobreakspace  {} of \nobreakspace  {}cycles}_{new}} - 1$ per benchmark\relax }}{32}{figure.caption.28}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.4}{\ignorespaces Code example from \texttt  {sglib-arraybinsearch}(variable names changed) and how it is compiled with and without a conditional move\relax }}{32}{figure.caption.29}}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\contentsline {table}{\numberline {4.2}{\ignorespaces Dynamic frequency of conditional moves, dynamic instruction count, IPC change and speedup per benchmark, sorted by dynamic frequency; green: significant speedups($>5\%$) , yellow: minor speedups(between $1\%$ and $2\%$)\relax }}{33}{table.caption.31}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.5}{\ignorespaces example of semantically equal assembly code with and without conditional moves, from the \texttt  {ctl-stack} benchmark\relax }}{33}{figure.caption.30}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.6}{\ignorespaces Speedup mapped onto dynamic frequency for each benchmark; correlation coefficient $r=0.6$\relax }}{34}{figure.caption.32}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.4}The effect of different branch predictors}{34}{section.4.4}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.7}{\ignorespaces Branch prediction misses and speedup for BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{34}{figure.caption.33}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.8}{\ignorespaces Branch prediction misses and speedup for SAT and BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{35}{figure.caption.34}}
\abx@aux@cite{shapiro1965analysis}
\abx@aux@cite{welch1947generalization}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {4.9}{\ignorespaces Branch prediction misses and speedup for LHBP and BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{36}{figure.caption.35}}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\contentsline {table}{\numberline {4.3}{\ignorespaces Mean clock frequency of the CPU for the initial and the cmov design\relax }}{36}{table.caption.36}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.5}Changes in clock frequency}{36}{section.4.5}}
\abx@aux@cite{mann1947test}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\contentsline {table}{\numberline {4.4}{\ignorespaces Mean resources needed by the fitting algorithm for the initial and the conditional move version of the processor over 12 runs each; the Mann-Whitney test indicates whether the samples were generated by the same or different distributions\relax }}{37}{table.caption.37}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.6}Resource usage}{37}{section.4.6}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {4.7}Complexity of the compiler}{38}{section.4.7}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {5}Conclusion}{39}{chapter.5}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {5.1}Summary of results}{39}{section.5.1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {5.2}Reflection on my approach}{40}{section.5.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {5.3}Potential further steps}{40}{section.5.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{Bibliography}{41}{section.5.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {A}LLVM extension}{41}{appendix.A}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{The definition of the conditional move for LLVM including all cmov patterns from RISCVInstrInfo.td}{{A}{41}{}{lstlisting.A.-1}{}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {B}Functional testing results}{46}{appendix.B}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {B.1}Test LLVM with ternary if statement}{46}{section.B.1}}
\newlabel{selecttests_results}{{B.1}{46}{Result of the test with ternary if statements}{lstlisting.B.1}{}}
\@writefile{lol}{\defcounter {refsection}{0}\relax }\@writefile{lol}{\contentsline {lstlisting}{\numberline {B.1}Result of the test with ternary if statements}{46}{lstlisting.B.1}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {B.2}Further LLVM tests}{47}{section.B.2}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {section}{\numberline {B.3}Assembly tests}{47}{section.B.3}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {C}Benchmark descriptions}{49}{appendix.C}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\gdef \LT@i {\LT@entry 
    {1}{97.35826pt}\LT@entry 
    {1}{296.52756pt}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {D}Evaluation results}{53}{appendix.D}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{RF1}{54}
\newlabel{RF2}{55}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {D.1}{\ignorespaces Speedup for SAT and BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{55}{figure.caption.39}}
\newlabel{RF3}{56}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {D.2}{\ignorespaces Branch prediction misses for LHBP and BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{56}{figure.caption.40}}
\newlabel{RF4}{57}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\contentsline {figure}{\numberline {D.3}{\ignorespaces Speedup for LHBP and BTB512, the base value for each benchmark is the number of misses without cmovs and BTB8\relax }}{57}{figure.caption.41}}
\@writefile{toc}{\defcounter {refsection}{0}\relax }\@writefile{toc}{\contentsline {chapter}{\numberline {E}Project Proposal}{59}{appendix.E}}
\@writefile{lof}{\defcounter {refsection}{0}\relax }\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\defcounter {refsection}{0}\relax }\@writefile{lot}{\addvspace {10\p@ }}
